// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Scootlytic.Data;

#nullable disable

namespace Scootlytic.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Scootlytic.Models.Adicionada", b =>
                {
                    b.Property<int>("IdCarrinho")
                        .HasColumnType("int");

                    b.Property<int>("IdTrotinete")
                        .HasColumnType("int");

                    b.HasKey("IdCarrinho", "IdTrotinete");

                    b.HasIndex("IdTrotinete");

                    b.ToTable("Adicionada");
                });

            modelBuilder.Entity("Scootlytic.Models.Carrinho", b =>
                {
                    b.Property<int>("IdCarrinho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCarrinho"));

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(6,2)");

                    b.HasKey("IdCarrinho");

                    b.ToTable("Carrinhos");
                });

            modelBuilder.Entity("Scootlytic.Models.Encomenda", b =>
                {
                    b.Property<int>("Numero")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Numero"));

                    b.Property<byte>("Condicao")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("DataEntrega")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailUtilizador")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("MetodoPagamento")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Numero");

                    b.HasIndex("EmailUtilizador");

                    b.ToTable("Encomendas");
                });

            modelBuilder.Entity("Scootlytic.Models.Escolhe", b =>
                {
                    b.Property<string>("EmailUtilizador")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("IdTrotinete")
                        .HasColumnType("int");

                    b.HasKey("EmailUtilizador", "IdTrotinete");

                    b.HasIndex("IdTrotinete");

                    b.ToTable("Escolhe");
                });

            modelBuilder.Entity("Scootlytic.Models.Passo", b =>
                {
                    b.Property<int>("idPasso")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("idPasso"));

                    b.Property<int>("NumeroPasso")
                        .HasColumnType("int");

                    b.Property<string>("ReferenciaPeca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("idPasso");

                    b.HasIndex("ReferenciaPeca");

                    b.ToTable("Passos");
                });

            modelBuilder.Entity("Scootlytic.Models.Peca", b =>
                {
                    b.Property<string>("Referencia")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<byte>("Estado")
                        .HasColumnType("tinyint");

                    b.HasKey("Referencia");

                    b.ToTable("Pecas");
                });

            modelBuilder.Entity("Scootlytic.Models.Possui", b =>
                {
                    b.Property<int>("IdTrotinete")
                        .HasColumnType("int");

                    b.Property<int>("IdPasso")
                        .HasColumnType("int");

                    b.HasKey("IdTrotinete", "IdPasso");

                    b.HasIndex("IdPasso");

                    b.ToTable("Possui");
                });

            modelBuilder.Entity("Scootlytic.Models.Trotinete", b =>
                {
                    b.Property<int>("IdTrotinete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdTrotinete"));

                    b.Property<string>("Cor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InformacaoTecnica")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Modelo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("NumeroEncomenda")
                        .HasColumnType("int");

                    b.HasKey("IdTrotinete");

                    b.HasIndex("NumeroEncomenda");

                    b.ToTable("Trotinetes");
                });

            modelBuilder.Entity("Scootlytic.Models.User", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Email");

                    b.HasIndex("CartId")
                        .IsUnique()
                        .HasFilter("[CartId] IS NOT NULL");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Scootlytic.Models.Adicionada", b =>
                {
                    b.HasOne("Scootlytic.Models.Carrinho", "Carrinho")
                        .WithMany()
                        .HasForeignKey("IdCarrinho")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scootlytic.Models.Trotinete", "Trotinete")
                        .WithMany()
                        .HasForeignKey("IdTrotinete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Carrinho");

                    b.Navigation("Trotinete");
                });

            modelBuilder.Entity("Scootlytic.Models.Encomenda", b =>
                {
                    b.HasOne("Scootlytic.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("EmailUtilizador")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scootlytic.Models.Escolhe", b =>
                {
                    b.HasOne("Scootlytic.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("EmailUtilizador")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scootlytic.Models.Trotinete", "Trotinete")
                        .WithMany()
                        .HasForeignKey("IdTrotinete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trotinete");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Scootlytic.Models.Passo", b =>
                {
                    b.HasOne("Scootlytic.Models.Peca", "Peca")
                        .WithMany()
                        .HasForeignKey("ReferenciaPeca")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Peca");
                });

            modelBuilder.Entity("Scootlytic.Models.Possui", b =>
                {
                    b.HasOne("Scootlytic.Models.Passo", "Passo")
                        .WithMany()
                        .HasForeignKey("IdPasso")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Scootlytic.Models.Trotinete", "Trotinete")
                        .WithMany()
                        .HasForeignKey("IdTrotinete")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Passo");

                    b.Navigation("Trotinete");
                });

            modelBuilder.Entity("Scootlytic.Models.Trotinete", b =>
                {
                    b.HasOne("Scootlytic.Models.Encomenda", "Encomenda")
                        .WithMany()
                        .HasForeignKey("NumeroEncomenda")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Encomenda");
                });

            modelBuilder.Entity("Scootlytic.Models.User", b =>
                {
                    b.HasOne("Scootlytic.Models.Carrinho", "Carrinho")
                        .WithOne("User")
                        .HasForeignKey("Scootlytic.Models.User", "CartId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Carrinho");
                });

            modelBuilder.Entity("Scootlytic.Models.Carrinho", b =>
                {
                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
